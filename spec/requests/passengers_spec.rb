# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/passengers', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Passenger. As you add validations to Passenger, be sure to
  # adjust the attributes here as well.
  let(:airplane_attributes) do
    { model: '737', number: 'AAA', seats: 200 }
  end

  let(:low_capacity_airplane_attributes) do
    { model: '737', number: 'AAA', seats: 1 }
  end

  let(:flight_attributes) do
    {
      from: 'BGY',
      to: 'KRK',
      departure: Time.current + (60 * 60),
      arrival: Time.current + (60 * 60 * 3),
      airplane_id: 1
    }
  end

  let(:valid_attributes) do
    {
      firstname: 'John', lastname: 'Doe', flight_id: 1
    }
  end

  let(:invalid_attributes) do
    { firstname: nil }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # PassengersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Airplane.create! airplane_attributes
      flight = Flight.create! flight_attributes
      Passenger.create! valid_attributes
      get flight_passengers_url(flight), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      Airplane.create! airplane_attributes
      flight = Flight.create! flight_attributes
      passenger = Passenger.create! valid_attributes
      get flight_passengers_url(flight, passenger), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Passenger' do
        Airplane.create! airplane_attributes
        flight = Flight.create! flight_attributes
        expect do
          post flight_passengers_url(flight),
               params: { passenger: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Passenger, :count).by(1)
      end

      it 'renders a JSON response with the new passenger' do
        Airplane.create! airplane_attributes
        flight = Flight.create! flight_attributes
        post flight_passengers_url(flight),
             params: { passenger: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Passenger' do
        Airplane.create! airplane_attributes
        flight = Flight.create! flight_attributes
        expect do
          post flight_passengers_url(flight),
               params: { passenger: invalid_attributes }, as: :json
        end.to change(Passenger, :count).by(0)
      end

      it 'renders a JSON response with errors for the new passenger' do
        Airplane.create! airplane_attributes
        flight = Flight.create! flight_attributes
        post flight_passengers_url(flight),
             params: { passenger: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end

      context 'with valid parameters on an full airplane' do
        it 'does not create a new Passenger' do
          Airplane.create! low_capacity_airplane_attributes
          flight = Flight.create! flight_attributes
          Passenger.create! valid_attributes
          expect do
            post flight_passengers_url(flight),
                 params: { passenger: valid_attributes }, as: :json
          end.to change(Passenger, :count).by(0)
        end
  
        it 'renders a JSON response with errors for the new passenger' do
          Airplane.create! low_capacity_airplane_attributes
          flight = Flight.create! flight_attributes
          Passenger.create! valid_attributes
          post flight_passengers_url(flight),
               params: { passenger: valid_attributes }, headers: valid_headers, as: :json
          expect(response).to have_http_status(:unprocessable_entity)
          expect(response.content_type).to match(a_string_including('application/json'))
        end
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { firstname: 'Jane' }
      end

      it 'updates the requested passenger' do
        Airplane.create! airplane_attributes
        flight = Flight.create! flight_attributes
        passenger = Passenger.create! valid_attributes
        patch flight_passenger_url(flight, passenger),
              params: { passenger: new_attributes }, headers: valid_headers, as: :json
        passenger.reload
        expect(passenger.firstname).to eq('Jane')
      end

      it 'renders a JSON response with the passenger' do
        Airplane.create! airplane_attributes
        flight = Flight.create! flight_attributes
        passenger = Passenger.create! valid_attributes
        patch flight_passenger_url(flight, passenger),
              params: { passenger: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the passenger' do
        Airplane.create! airplane_attributes
        flight = Flight.create! flight_attributes
        passenger = Passenger.create! valid_attributes
        patch flight_passenger_url(flight, passenger),
              params: { passenger: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested passenger' do
      Airplane.create! airplane_attributes
      flight = Flight.create! flight_attributes
      passenger = Passenger.create! valid_attributes
      expect do
        delete flight_passenger_url(flight, passenger), headers: valid_headers, as: :json
      end.to change(Passenger, :count).by(-1)
    end
  end
end
